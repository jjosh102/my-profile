@page "/projects"
@inject IGithubHttpClient GitHubClient

<div class="container mx-auto p-4">
    <div class="space-y-6">
        <h1 class="text-3xl font-bold text-[#c9d1d9]">My Projects</h1>
        
        @if (githubProjects != null && githubProjects.Any())
        {
            @foreach (var project in githubProjects)
            {
                <div class="flex justify-between w-full bg-[#161b22] border border-[#30363d] shadow rounded-lg p-4">
                    <div class="w-full">
                        <div class="mb-1">
                            <a href="@project.HtmlUrl" class="text-lg font-bold text-[#58a6ff] hover:underline">
                                @project.Name
                            </a>

                            @if (!string.IsNullOrWhiteSpace(project.Homepage))
                            {
                                <a href="@project.Homepage" class="text-sm font-medium text-[#58a6ff] hover:underline ml-4" title="Site Link">
                                    <svg class="inline-block w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M10.59 13.41a1 1 0 010-1.42l4.83-4.83a3 3 0 114.24 4.24l-1.41 1.41a1 1 0 01-1.42-1.42l1.41-1.41a1 1 0 00-1.42-1.42l-4.83 4.83a1 1 0 01-1.42 0zM13.41 10.59a1 1 0 010 1.42l-4.83 4.83a3 3 0 11-4.24-4.24l1.41-1.41a1 1 0 011.42 1.42l-1.41 1.41a1 1 0 001.42 1.42l4.83-4.83a1 1 0 011.42 0z"></path>
                                    </svg>
                                </a>
                            }
                        </div>
                        <p class="text-gray-400 text-sm">
                            @project.Description
                        </p>

                        <div class="flex flex-wrap gap-2 text-xs text-[#58a6ff] my-4">
                            @if (project.Topics.Any())
                            {
                                foreach (var topic in project.Topics.Where(s => !s.Equals("show", StringComparison.OrdinalIgnoreCase)))
                                {
                                    <span class="bg-[#121D2F] rounded-full px-2 py-1">@topic</span>
                                }
                            }
                        </div>

                        <div class="flex items-center text-xs text-gray-500 my-2 space-x-4">
                            <span class="flex items-center">
                                <span class="w-2.5 h-2.5 rounded-full mr-1" style="background-color:@GetLanguageBackgroundColor(project.Language)"></span>
                                @project.Language
                            </span>

                            <span class="flex items-center text-sm text-gray-500">
                                <svg class="w-4 h-4 text-yellow-500 mr-1" fill="currentColor" viewBox="0 0 16 16">
                                    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Z"></path>
                                </svg>
                                <span>@project.StargazersCount</span>
                            </span>

                            <span>Updated <relative-time datetime="2024-12-21T12:55:36Z">@GetTimeAgo(project.UpdatedAt)</relative-time></span>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-center text-[#8b949e]">
                loading projects...
            </p>
        }
    </div>
</div>

@code {
    private static readonly Dictionary<string, string> LanguageColors = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        { "CSS", "#563d7c" },
        { "HTML", "#e34c26" },
        { "JavaScript", "#f1e05a" },
        { "Python", "#3572A5" },
        { "C#", "#178600" },
        { "Java", "#b07219" },
        { "Ruby", "#701516" },
        { "PHP", "#4f5b93" },
        { "Go", "#00ADD8" },
        { "C", "#555555" },
        { "C++", "#f34b7d" },
        { "TypeScript", "#2b7489" },
        { "Swift", "#ffac45" },
        { "Kotlin", "#7f52ff" },
        { "Rust", "#000000" },
        { "Dart", "#00B4AB" },
        { "Scala", "#c22d40" },
        { "Shell", "#89e051" },
        { "PowerShell", "#012456" },
        { "R", "#276dc3" },
        { "Lua", "#000080" },
        { "Objective-C", "#438eff" },
        { "Elixir", "#6e4a7e" },
        { "Perl", "#0298c3" },
        { "Groovy", "#2f6a8f" },
        { "Vue", "#42b883" }
    };

    private IEnumerable<GithubRepo>? githubProjects;

    protected override async Task OnInitializedAsync()
    {
        var result = await GitHubClient.GetReposToBeShown();
        if (result.IsSuccess && result.Value is not null)
        {
            githubProjects = result.Value;
        }
    }

    private static string GetTimeAgo(DateTime lastUpdate)
    {
        var timeDifference = DateTime.UtcNow - lastUpdate;

        if (timeDifference.TotalSeconds < 60)
        {
            return $"{(int)timeDifference.TotalSeconds} second{(timeDifference.TotalSeconds > 1 ? "s" : "")} ago";
        }
        else if (timeDifference.TotalMinutes < 60)
        {
            return $"{(int)timeDifference.TotalMinutes} minute{(timeDifference.TotalMinutes > 1 ? "s" : "")} ago";
        }
        else if (timeDifference.TotalHours < 24)
        {
            return $"{(int)timeDifference.TotalHours} hour{(timeDifference.TotalHours > 1 ? "s" : "")} ago";
        }
        else if (timeDifference.TotalDays < 2)
        {
            return "Yesterday";
        }
        else if (timeDifference.TotalDays < 30)
        {
            return $"{(int)timeDifference.TotalDays} day{(timeDifference.TotalDays > 1 ? "s" : "")} ago";
        }
        else if (timeDifference.TotalDays < 365)
        {
            return $"on {lastUpdate:MMM d}"; 
        }
        else
        {
            return $"on {lastUpdate:MMM d, yyyy}"; 
        }
    }

    private string GetLanguageBackgroundColor(string? language)
    {
        if (string.IsNullOrWhiteSpace(language))
        {
            return "#cccccc";
        }
        return LanguageColors.TryGetValue(language, out var color) ? color : "#cccccc";
    }
}
