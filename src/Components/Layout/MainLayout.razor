@inherits LayoutComponentBase
@inject NavigationService NavigationService
@inject ILocalStorageCache LocalStorageCache

<div class="@($"{theme}")">
    <div class="min-h-screen flex flex-col dark:bg-[#0d1117] bg-white">
        <header class="bg-white dark:bg-[#010409] py-4 w-full border-b border-gray-200 dark:border-gray-700">
            <div class="px-4 flex items-center justify-between">
                <div class="flex items-center gap-4">
                    <div class="flex items-center ml-2">
                        <img class="w-10 h-10 rounded-full cursor-pointer" src="jjosh-logo.png"
                            @onclick="() => NavigationService.GoToHome()" />
                    </div>
                    <nav class="text-gray-900 dark:text-gray-100 font-semibold text-md font-mono">
                        jjosh102
                    </nav>
                </div>

                <button @onclick="ToggleTheme" class="flex items-center justify-center gap-2 px-3 py-1 text-sm font-medium rounded-md transition-colors 
                    @(IsDarkTheme ? "bg-[#161b22] border border-[#30363d] text-[#c9d1d9] hover:bg-[#21262d]" : "bg-white border border-[#d0d7de] text-[#24292f] hover:bg-[#f6f8fa]") 
                    focus:outline-none" title="toggle theme">
                    @if (!IsDarkTheme)
                    {
                        <svg class="w-4 h-4" viewBox="0 0 16 16" fill="currentColor">
                            <path
                                d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z" />
                        </svg>
                    }
                    else
                    {
                        <svg class="w-4 h-4" viewBox="0 0 20 20" fill="currentColor">
                            <path
                                d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z" />
                        </svg>
                    }
                </button>
            </div>
        </header>

        <main class="grow bg-white dark:bg-[#0d1117]">
            <div class="mx-auto p-4 max-w-7xl">
                <ErrorBoundary>
                    <ChildContent>
                        <CascadingValue Value="theme">@Body</CascadingValue>
                    </ChildContent>
                    <ErrorContent Context="Exception">
                        <div
                            class="bg-gray-50 dark:bg-[#161b22] border border-red-500 dark:border-[#f85149] text-red-500 dark:text-[#f85149] px-4 py-3 rounded">
                            <span class="font-bold">Error Type:</span> @Exception.GetType() <br />
                            <span class="font-bold">Message:</span> @Exception.Message
                        </div>
                        <p class="text-gray-500 dark:text-[#8b949e] mt-4 text-center">
                            Nothing to see here right now. Sorry!
                        </p>
                    </ErrorContent>
                </ErrorBoundary>
            </div>
        </main>
    </div>
</div>

@code
{
    private const string ThemeKey = "theme";
    private string theme = "dark";

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorageCache.GetCacheAsync<string>(ThemeKey) is { } result)
        {
            theme = result;
        }
        else
        {
            await LocalStorageCache.SetCacheAsync<string>(ThemeKey, theme);
        }
    }
    
    private async Task ToggleTheme()
    {
        theme = IsDarkTheme ? "light" : "dark";
        await LocalStorageCache.SetCacheAsync<string>(ThemeKey, theme);
        StateHasChanged();
    }

    private bool IsDarkTheme => theme == "dark";


}