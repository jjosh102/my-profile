@inject IGithubHttpClient GithubHttpClient
@inject IJSRuntime JSRuntime
<span class="text-md  text-gray-900 dark:text-gray-100 mb-4">@_overAllContributions contributions this year</span>
<div class="p-4 border border-gray-200 dark:border-[#30363d] bg-white dark:bg-transparent shadow-sm rounded-lg">
  @if (_contributions.Any())
  {
    <div class="my-4 flex justify-center items-center">
      <canvas id="contributionHeatmap" width="800" height="200"></canvas>
    </div>
  }
  else
  {
    <div
      class="dark:bg-[#161b22] dark:border-[#30363d] dark:text-[#8b949e] bg-[#ffffff] border border-[#d0d7de] text-[#656d76] shadow-sm rounded-lg p-4 text-center">
      <p class="text-sm animate-pulse">Loading contributions..</p>
    </div>
  }
</div>
@code {

  private IReadOnlyList<Contribution> _contributions = [];

  private int _currentYear = DateTime.Now.Year;
  private int _overAllContributions = 0;

  protected override async Task OnInitializedAsync()
  {
    if (await GithubHttpClient.GetContributionsAsync() is { IsSuccess: true, Value: not null } result)
    {
      _contributions = result.Value.Contributions;

      _overAllContributions = _contributions
          .Where(d => d.Date.Year == _currentYear)
          .Sum(s => s.ContributionCount);
    }
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (_contributions.Any())
    {
      await RenderHeatmap();
    }
  }

  private async Task RenderHeatmap()
  {
    var dates = _contributions.Select(c => c.Date.ToString("yyyy-MM-dd")).ToArray();
    var counts = _contributions.Select(c => c.ContributionCount).ToArray();
    await JSRuntime.InvokeVoidAsync("renderContributionHeatmap", dates, counts);
  }

}
