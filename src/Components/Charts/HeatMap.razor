@inject IGithubHttpClient GithubHttpClient
@inject IJSRuntime JSRuntime

@if (_contributions.Any())
{
  <div class="my-4 flex justify-center items-center">
    <canvas id="contributionHeatmap" width="800" height="200"></canvas>
  </div>
}
else
{
  <div
    class="dark:bg-[#161b22] dark:border-[#30363d] dark:text-[#8b949e] bg-[#ffffff] border border-[#d0d7de] text-[#656d76] shadow-sm rounded-lg p-4 text-center">
    <p class="text-sm animate-pulse">Loading contributions..</p>
  </div>
}


@code {

  private IReadOnlyList<Contribution> _contributions = [];

  protected override async Task OnInitializedAsync()
  {
    if (await GithubHttpClient.GetContributionsAsync() is { IsSuccess: true, Value: not null } result)
    {
      _contributions = result.Value.Contributions;
    }
  }
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (_contributions.Any())
    {
      await RenderHeatmap();
    }
  }

  private async Task RenderHeatmap()
  {
    var dates = _contributions.Select(c => c.Date.ToString("yyyy-MM-dd")).ToArray();
    var counts = _contributions.Select(c => c.ContributionCount).ToArray();
    await JSRuntime.InvokeVoidAsync("renderContributionHeatmap", dates, counts);
  }

}
