@inject IGithubHttpClient GithubHttpClient
@inject IJSRuntime JSRuntime
<div class="my-4">
  <h3 class="text-sm font-bold text-gray-900 dark:text-[#c9d1d9] mb-2">Code Frequency</h3>

  @if (_codeFrequencyData.Any())
  {
    <div class="bg-white dark:bg-[#161b22] border border-gray-200 dark:border-[#30363d] shadow-sm rounded-lg p-4">
      <canvas id="codeFrequencyChart" width="400" height="200"></canvas>
    </div>
  }
  else
  {
    <div
      class="bg-white dark:bg-[#161b22] border border-gray-200 dark:border-[#30363d] shadow-sm rounded-lg p-4 text-center">
      <p class="text-gray-500 dark:text-[#8b949e] text-sm animate-pulse">Loading chart..</p>
    </div>
  }
</div>
@code {
  [Parameter] public string RepoName { get; set; } = string.Empty;

  private IReadOnlyList<int[]> _codeFrequencyData = [];

  protected override async Task OnParametersSetAsync()
  {
    await LoadCodeFrequencyData();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (_codeFrequencyData.Any())
    {
      await RenderCodeFrequencyChart();
    }
  }

  private async Task LoadCodeFrequencyData()
  {
    if (await GithubHttpClient.GetCodeFrequencyStatsAsync(RepoName) is { IsSuccess: true, Value: not null } result)
    {
      _codeFrequencyData = result.Value;
    }
  }

  private async Task RenderCodeFrequencyChart()
  {
    var weeks = _codeFrequencyData.Select(data =>
    DateTimeOffset.FromUnixTimeSeconds(data[0]).ToString("yyyy-MM-dd")).ToArray();
    var additions = _codeFrequencyData.Select(data => data[1]).ToArray();
    var deletions = _codeFrequencyData.Select(data => -data[2]).ToArray();
    await JSRuntime.InvokeVoidAsync("renderCodeFrequencyChart", weeks, additions, deletions);
  }

}